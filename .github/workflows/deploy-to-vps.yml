name: Deploy FirstDue Listener (Node)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, linux]

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull latest image
        run: docker pull kickedsoda/firstdue-listener:latest

      - name: Stop and remove existing container (if any)
        run: docker rm -f firstdue-listener || true

      - name: Create .env file safely
        run: |
          printf 'NODE_ENV="production"\n' > .env
          printf 'FIRSTDUE_API_KEY="%s"\n' "${{ secrets.FIRSTDUE_API_KEY }}" >> .env
          printf 'PORT="%s"\n' "${{ secrets.PORT }}" >> .env
          printf 'TIMEZONE="%s"\n' "${{ secrets.TIMEZONE }}" >> .env
          printf 'LOG_LEVEL="%s"\n' "${{ secrets.LOG_LEVEL }}" >> .env
          printf 'CONVEX_URL="%s"\n' "${{ secrets.CONVEX_URL }}" >> .env
          printf 'WEATHER_API_KEY="%s"\n' "${{ secrets.WEATHER_API_KEY }}" >> .env
          printf 'WEATHER_LAT="%s"\n' "${{ secrets.WEATHER_LAT }}" >> .env
          printf 'WEATHER_LNG="%s"\n' "${{ secrets.WEATHER_LNG }}" >> .env
          printf 'WEATHER_UNITS="%s"\n' "${{ secrets.WEATHER_UNITS }}" >> .env

      - name: Run container with env file
        run: |
          docker run -d \
            --name firstdue-listener \
            --restart unless-stopped \
            --env-file .env \
            -p "${{ secrets.PORT }}":"${{ secrets.PORT }}" \
            kickedsoda/firstdue-listener:latest

      - name: Clean up env file
        run: rm .env
